<div id="home">  
  <div class="form-container">    
      <div class="user-container">
          <img class="user-icon" src="{{currentUser.image}}" alt="{{currentUser.username}}'s icon">
          <h3>{{currentUser.username}}</h3>
      </div>  
      <form action="/home" method="POST" enctype="multipart/form-data">
          <input type="text" name="creator" value="{{currentUser.id}}" hidden>
          <input id="input-text" onkeyup="hasContent()" type="textarea" cols="40" rows="5" maxlength="240" name="content" placeholder="What are you thinking?" size="100px">
          <br>
          <img src="" alt="gif selected" class="hidden" id="gif-selected" width="200px">
          <input id="input-media" onchange="hasMedia()" type="file" name="media">
          <input id="gif-input" type="text" onchange="hasGif()" name="gif" class="hidden">
          <button id="btn-post" type="submit" disabled>POST</button>
      </form>
      <button id="btn-giphys">GIF</button>
  </div>
  <br>
  <div class="hidden" id="giphy-container">
      <input type="text" id="search-input">
      <button id="btn-giphy">Search</button>
    <div id="giphy-list-container">         
    </div>  
  </div>
  <br>
  <h3>POSTS:</h3>
  <div class="post-container">
      {{#each listWithoutDuplicates as | post |}}
          <div class="post" data-id="{{post.id}}">
            <a href="/profile/{{post.creator.username}}">
              <img src="{{post.creator.image}}" alt="{{post.creator.username}}'s icon" width="40">        
              <h5>{{post.creator.username}}</h5>
            </a>
            <p>{{post.content}}</p>
            {{#if post.media}}<img src="{{post.media}}" alt="Media uploaded" width="400px">{{/if}}
            {{#if post.gif}}<img src="{{post.gif}}" alt="Gif uploaded" width="100px">{{/if}}
            {{#if post.sameOwner}} <a class="remove" data-id="{{post.id}}">Delete</a>{{/if}}
            {{#if post.alreadyLiked}}
              <a class="btn-like liked" data-id="{{post.id}}">Unlike</a>
            {{else}}
              <a class="btn-like unliked emit-notification" data-id="{{post.id}}" data-receiver="{{post.creator.username}}">Like</a>
            {{/if}}  
            <a href="/post/{{post.id}}/likes" class="likesCount-{{post.id}}">{{post.likesCount}}</a>
            <a href="/comments/{{post.id}}" class="btn-comment" data-id="{{post.id}}">Comments: <ins id="commentsCount">{{post.commentsCount}}</ins></a>  
          </div>
      {{/each}}
  </div>
</div>

<script>
  //DELETE POST
  const removeNodes = document.querySelectorAll('.remove');
  for(let node of removeNodes) {
    node?.addEventListener('click', () => {
      const nodeId = node.dataset.id;
      axios.delete(`/home/deletePost/${nodeId}`)
        .then(responseFromApi => {
          console.log('Success!', responseFromApi);
          if(responseFromApi.status == 204) {
            document.querySelector(`.post[data-id="${nodeId}"]`).remove();
          }
        })
        .catch(error => console.log('Error!', error))
    })
  }

  //LIKES
  const likeNodes = document.querySelectorAll('.btn-like');

  for(let node of likeNodes) {
      node?.addEventListener('click', () => {
      const dataPostID = node.dataset.id;
      const likesCount = document.querySelector(`.likesCount-${dataPostID}`);
      const receiverUsername = node.getAttribute('data-receiver')      

      axios.put(`/like/${dataPostID}`)
      .then(responseFromApi => {
          console.log('Success!', responseFromApi);
          if(responseFromApi.status == 204) {
              if (node.textContent === 'Like') {
                node.textContent = 'Unlike';
                node.classList.remove('unliked');
                node.classList.add('liked');
                likesCount.textContent = Number(likesCount.textContent) + 1;
                socket.emit('notification', receiverUsername);              
              } else {
                node.textContent = 'Like';
                node.classList.remove('liked');
                node.classList.add('unliked');
                likesCount.textContent = Number(likesCount.textContent) - 1;
              }
          }
      })
      .catch(error => console.log('Error!', error))
  });
  }

  //UPLOAD CONTENT OR MEDIA
  function hasContent() {
    const btnPost = document.getElementById('btn-post');
    const inputText = document.getElementById('input-text');
    const inputMedia = document.getElementById('input-media');

    if (inputText.value === '') {
      btnPost.disabled = true; 
    } else {
      btnPost.disabled = false; 
    }
  };   

  function hasMedia() {
    const btnPost = document.getElementById('btn-post');
    const inputMedia = document.getElementById('input-media');

     if (!inputMedia.value) {
      btnPost.disabled = true; 
    } else {
      btnPost.disabled = false; 
    }
  };

  function hasGif() {
    const btnPost = document.getElementById('btn-post');
    const gifInput = document.getElementById('gif-input');

    if (!gifInput.value) {
      btnPost.disabled = true; 
    } else {
      btnPost.disabled = false; 
    }
  };

  //AXIOS GIPHYS-LIST
  const btnGiphys = document.getElementById('btn-giphys');
  const giphyContainer = document.getElementById('giphy-container');
  const giphyListContainer = document.getElementById('giphy-list-container');
  const gifInput = document.getElementById('gif-input');

  btnGiphys.addEventListener('click', () => {
    if (giphyContainer.classList.contains('hidden')) {
      giphyContainer.classList.remove('hidden');

      axios.get(`/gifs/list`)
        .then(giphys => {
          const gifSelected = document.getElementById('gif-selected');

          giphys.data.forEach((giphy) => {
            let div = document.createElement('div');
            div.classList.add('gif');

            let image = document.createElement('img');
            image.src = giphy.images.downsized_medium.url;
            image.setAttribute('alt', 'Gif not found');
            image.setAttribute('referrerpolicy', 'no-referrer');
            image.setAttribute('width', '150px');
            image.classList.add('gif-img')

            image.addEventListener('click', () => {
              let src = image.src;
              giphyContainer.classList.add('hidden');
              gifSelected.src = src;
              gifSelected.classList.remove('hidden');

              gifInput.value = src;
              gifInput.dispatchEvent(new Event('change'))
            })

            div.appendChild(image)
            giphyListContainer.appendChild(div);
          })
        })
        .catch(error => console.log('Error!'));
    } else {
      giphyContainer.classList.add('hidden');
      while (giphyListContainer.firstChild) {
        giphyListContainer.removeChild(giphyListContainer.firstChild)
      }
    };
  })

  //AXIOS SEARCH SPECIFIC GIPHY
  const searchInput = document.getElementById('search-input');
  const btnGiphy = document.getElementById('btn-giphy');


  btnGiphy.addEventListener('click', () => {
    const gifSearch = searchInput.value

    axios.post(`/gifs/${gifSearch}`)
      .then(giphys => {
        while (giphyListContainer.firstChild) {
          giphyListContainer.removeChild(giphyListContainer.firstChild)
        };

        if (giphys) {
          const gifSelected = document.getElementById('gif-selected');

          giphys.data.forEach((giphy) => {
            let div = document.createElement('div');
            div.classList.add('gif');

            let image = document.createElement('img');
            image.src = giphy.images.downsized_medium.url;
            image.setAttribute('alt', 'Gif not found');
            image.setAttribute('referrerpolicy', 'no-referrer');
            image.setAttribute('width', '150px');
            image.classList.add('gif-img');

            image.addEventListener('click', () => {
              let src = image.src;

              gifSelected.src = src;
              gifSelected.classList.remove('hidden');

              gifInput.value = src;
              gifInput.dispatchEvent(new Event('change'))
              giphyContainer.classList.add('hidden');
            })

            div.appendChild(image)
            giphyListContainer.appendChild(div);
          })
        }
      })
      .catch(error => console.log('Error!'));
  });
</script>