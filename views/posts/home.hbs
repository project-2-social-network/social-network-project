<div id="home" class="dinamic-view-container">
    <h2>Home</h2>  
    <div class="form-container">    
      <div class="user-container">
          <img class="image-cover-medium" src="{{currentUser.image}}" alt="icon">
      </div>  
      <form class="create-post-container" action="/home" method="POST" enctype="multipart/form-data">
          <input type="text" name="creator" value="{{currentUser.id}}" hidden>
          <textarea id="input-text" onkeyup="hasContent()" type="textarea" maxlength="240" name="content" placeholder="What are you thinking {{currentUser.username}}?" size="100px" cols="40" rows="2"></textarea>
          <br>          
            <img src="" alt="gif selected" class="hidden content-uploaded" id="gif-selected" width="200px">
            <br>
            <p class="hidden media-selected content-uploaded">File succesfully uploaded!</p>                 
          <div class="file-gif-post-container">
            <div class="file-gif-post-btns">
              <label for="input-media"><img class="img-input-media" src="/images/File-icon-hover.png" /></label>
              <input id="input-media" onchange="hasMedia()" type="file" name="media">
              <a id="btn-giphys" width="30px"><img src="/images/GIF-icon-hover.png" alt="GIF icon"></a>
              <input id="gif-input" type="text" onchange="hasGif()" name="gif" class="hidden">
            </div>
            <button id="btn-post" type="submit" disabled>POST</button>
          </div>
      </form>
    </div>
  <br>
  <div class="hidden" id="giphy-container">
    <div class="searchBar">
      <div class="search-container">
        <input class="search-input" name="searchInfo" id="searchQueryInput" type="text" name="searchQueryInput" placeholder="Search for GIFs"/>
        <a class="btn-giphy" name="searchQuerySubmit"><img src="/images/Search_icon.png" alt="Search icon"></a>
      </div>
      <img class="close-gif-btn" src="/images/Close-icon.png" alt="Close icon">        
    </div>   
    <div id="giphy-list-container">         
    </div>  
  </div>
  <br>
  <div>{{#if listWithoutDuplicates}}
        {{#each listWithoutDuplicates as | post |}}
          <div class="post-container post" data-id="{{post.id}}">
            <a href="/profile/{{post.creator.username}}">
              <div class="post-user-container">
                <span class="user-img-post">
                    <img class="image-cover-medium" src="{{post.creator.image}}" alt="icon">
                </span>
                <div class="post-content">
                    <div class="div-date">
                      <h5>{{post.creator.username}}</h5>
                      <span class="small-date">{{post.hour}}</span>
                    </div>
                    <p>{{post.content}}</p>
                    {{#if post.media}}<img src="{{post.media}}" alt="Media uploaded" width="200px">{{/if}}
                    {{#if post.gif}}<img src="{{post.gif}}" alt="Gif uploaded" width="200px">{{/if}}
                </div>
              </div>
            </a>

            <div class="post-actions">  
                <div class="like-comment-container">
                  <div>
                    {{#if post.alreadyLiked}}
                      <a class="btn-like liked" data-id="{{post.id}}"><img class="img-liked" width="20px" src="/images/Like-icon.png" alt="Unlike icon"></a>
                    {{else}}
                      <a class="btn-like unliked emit-notification" data-id="{{post.id}}" data-receiver="{{post.creator.username}}"><img class="img-unliked" width="20px" src="/images/Unlike-icon.png" alt="Like icon"></a>
                    {{/if}}
                    <a href="/post/{{post.id}}/likes" class="likesCount-{{post.id}} likes-count">{{post.likesCount}}</a>
                  </div>             
                  
                  <div>
                    <a href="/comments/{{post.id}}" class="btn-comment" data-id="{{post.id}}"><img width="20px" src="/images/Comment-icon.png" alt="Comment icon"></a>
                    <ins id="commentsCount" class="comments-count">{{post.commentsCount}}</ins>
                  </div>

                  {{#if post.sameOwner}} <div><a class="remove" data-id="{{post.id}}"><img width="20px" src="/images/Trash-icon.png" alt="Trash icon"></a></div> {{/if}}
                </div>              
            </div>         
          </div>
        {{/each}}
      {{else}}
        <h5 style="text-align: center"><i>Start following people to see their posts here.</i></h5>
      {{/if}}
  </div>
</div>

<script>
  //DELETE POST
  const removeNodes = document.querySelectorAll('.remove');
  for(let node of removeNodes) {
    node?.addEventListener('click', () => {
      const nodeId = node.dataset.id;
      axios.delete(`/home/deletePost/${nodeId}`)
        .then(responseFromApi => {
          console.log('Success!', responseFromApi);
          if(responseFromApi.status == 204) {
            document.querySelector(`.post[data-id="${nodeId}"]`).remove();
          }
        })
        .catch(error => console.log('Error!', error))
    })
  }

  //LIKES
  const likeNodes = document.querySelectorAll('.btn-like');

  for(let node of likeNodes) {
      node?.addEventListener('click', () => {
      const dataPostID = node.dataset.id;
      const likesCount = document.querySelector(`.likesCount-${dataPostID}`);
      const receiverUsername = node.getAttribute('data-receiver');    
      let heartImg = node.querySelector('img');
    
      axios.put(`/like/${dataPostID}`)
      .then(responseFromApi => {
          console.log('Success!', responseFromApi);
          if(responseFromApi.status == 204) {
              if (node.classList.contains('unliked')) {
                heartImg.src = '/images/Like-icon.png';
                node.classList.remove('unliked');
                node.classList.add('liked');
                likesCount.textContent = Number(likesCount.textContent) + 1;
                //NOTIFICATION
                socket.emit('notification', receiverUsername);              
              } else {
                heartImg.src = '/images/Unlike-icon.png';
                node.classList.remove('liked');
                node.classList.add('unliked');
                likesCount.textContent = Number(likesCount.textContent) - 1;
              }
          }
      })
      .catch(error => console.log('Error!', error))
  });
  }

  //UPLOAD CONTENT OR MEDIA
  function hasContent() {
    const btnPost = document.getElementById('btn-post');
    const inputText = document.getElementById('input-text');
    const inputMedia = document.getElementById('input-media');

    if (inputText.value === '') {
      btnPost.disabled = true; 
    } else {
      btnPost.disabled = false; 
    }
  };   

  function hasMedia() {
    const btnPost = document.getElementById('btn-post');
    const inputMedia = document.getElementById('input-media');
    const mediaSelected = document.querySelector('.media-selected');

     if (!inputMedia.value) {
      mediaSelected.classList.add('hidden');    
      btnPost.disabled = true;      
    } else {        
      mediaSelected.classList.remove('hidden');
      btnPost.disabled = false; 
    }
  };

  function hasGif() {
    const btnPost = document.getElementById('btn-post');
    const gifInput = document.getElementById('gif-input');

    if (!gifInput.value) {
      btnPost.disabled = true; 
    } else {
      btnPost.disabled = false; 
    }
  };
  
  //GIPHYS
  const btnGiphys = document.getElementById('btn-giphys');
  const giphyContainer = document.getElementById('giphy-container');
  const giphyListContainer = document.getElementById('giphy-list-container');
  const gifInput = document.getElementById('gif-input');

  //CLOSE GIF CONTAINER
  const btnCloseGiphy = document.querySelector('.close-gif-btn');

  btnCloseGiphy.addEventListener('click', () => {
    giphyContainer.classList.add('hidden')    
  });

  //AXIOS GIPHYS-LIST
  btnGiphys.addEventListener('click', () => {
    if (giphyContainer.classList.contains('hidden')) {
      giphyContainer.classList.remove('hidden');

      axios.get(`/gifs/list`)
        .then(giphys => {
          const gifSelected = document.getElementById('gif-selected');

          giphys.data.forEach((giphy) => {
            let div = document.createElement('div');
            div.classList.add('gif');

            let image = document.createElement('img');
            image.src = giphy.images.downsized_medium.url;
            image.setAttribute('alt', 'Gif not found');
            image.setAttribute('referrerpolicy', 'no-referrer');
            image.classList.add('gif-img')

            image.addEventListener('click', () => {
              let src = image.src;
              giphyContainer.classList.add('hidden');
              gifSelected.src = src;
              gifSelected.classList.remove('hidden');

              gifInput.value = src;
              gifInput.dispatchEvent(new Event('change'))
            })

            div.appendChild(image)
            giphyListContainer.appendChild(div);
          })
        })
        .catch(error => console.log('Error!'));
    } else {
      giphyContainer.classList.add('hidden');
      while (giphyListContainer.firstChild) {
        giphyListContainer.removeChild(giphyListContainer.firstChild)
      }
    };
  })

  //AXIOS SEARCH SPECIFIC GIPHY
  const searchInput = document.querySelector('.search-input');
  const btnGiphy = document.querySelector('.btn-giphy');

  btnGiphy.addEventListener('click', () => {
    const gifSearch = searchInput.value

    axios.post(`/gifs/${gifSearch}`)
      .then(giphys => {
        while (giphyListContainer.firstChild) {
          giphyListContainer.removeChild(giphyListContainer.firstChild)
        };

        if (giphys) {
          const gifSelected = document.getElementById('gif-selected');

          giphys.data.forEach((giphy) => {
            let div = document.createElement('div');
            div.classList.add('gif');

            let image = document.createElement('img');
            image.src = giphy.images.downsized_medium.url;
            image.setAttribute('alt', 'Gif not found');
            image.setAttribute('referrerpolicy', 'no-referrer');
            image.setAttribute('width', '150px');
            image.classList.add('gif-img');

            image.addEventListener('click', () => {
              let src = image.src;

              gifSelected.src = src;
              gifSelected.classList.remove('hidden');

              gifInput.value = src;
              gifInput.dispatchEvent(new Event('change'))
              giphyContainer.classList.add('hidden');
            })

            div.appendChild(image)
            giphyListContainer.appendChild(div);
          })
        }
      })
      .catch(error => console.log('Error!'));
  });
</script>